
AVRASM ver. 2.1.30  E:\PCB\Task\Gowtham Ashokan(India)\One\PRO\Debug\List\sss.asm Thu Nov 03 19:30:41 2022

E:\PCB\Task\Gowtham Ashokan(India)\One\PRO\Debug\List\sss.asm(1081): warning: Register r4 already defined by the .DEF directive
E:\PCB\Task\Gowtham Ashokan(India)\One\PRO\Debug\List\sss.asm(1082): warning: Register r5 already defined by the .DEF directive
E:\PCB\Task\Gowtham Ashokan(India)\One\PRO\Debug\List\sss.asm(1083): warning: Register r6 already defined by the .DEF directive
E:\PCB\Task\Gowtham Ashokan(India)\One\PRO\Debug\List\sss.asm(1084): warning: Register r7 already defined by the .DEF directive
E:\PCB\Task\Gowtham Ashokan(India)\One\PRO\Debug\List\sss.asm(1085): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.42 
                 ;(C) Copyright 1998-2020 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega8
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	RCALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	RCALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _val=R4
                 	.DEF _val_msb=R5
                 	.DEF _val1=R6
                 	.DEF _val1_msb=R7
                 	.DEF _idea=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c021      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 c044      	RJMP _timer0_ovf_isr
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000013 0000
000014 ffff      	.DB  0x0,0x0,0xFF,0xFF
000015 0c00      	.DB  0x0,0xC
                 
                 _0x3:
000016 063f
000017 4f5b
000018 6d66
000019 277d      	.DB  0x3F,0x6,0x5B,0x4F,0x66,0x6D,0x7D,0x27
00001a 6f7f      	.DB  0x7F,0x6F
                 
                 __GLOBAL_INI_TBL:
00001b 0006      	.DW  0x06
00001c 0004      	.DW  0x04
00001d 0026      	.DW  __REG_VARS*2
                 
00001e 000a      	.DW  0x0A
00001f 0160      	.DW  _disp
000020 002c      	.DW  _0x3*2
                 
                 _0xFFFFFFFF:
000021 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000022 94f8      	CLI
000023 27ee      	CLR  R30
000024 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000025 e0f1      	LDI  R31,1
000026 bffb      	OUT  GICR,R31
000027 bfeb      	OUT  GICR,R30
000028 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000029 e08d      	LDI  R24,(14-2)+1
00002a e0a2      	LDI  R26,2
00002b 27bb      	CLR  R27
                 __CLEAR_REG:
00002c 93ed      	ST   X+,R30
00002d 958a      	DEC  R24
00002e f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00002f e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000030 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000031 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000032 93ed      	ST   X+,R30
000033 9701      	SBIW R24,1
000034 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000035 e3e6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000036 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000037 9185      	LPM  R24,Z+
000038 9195      	LPM  R25,Z+
000039 9700      	SBIW R24,0
00003a f061      	BREQ __GLOBAL_INI_END
00003b 91a5      	LPM  R26,Z+
00003c 91b5      	LPM  R27,Z+
00003d 9005      	LPM  R0,Z+
00003e 9015      	LPM  R1,Z+
00003f 01bf      	MOVW R22,R30
000040 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000041 9005      	LPM  R0,Z+
000042 920d      	ST   X+,R0
000043 9701      	SBIW R24,1
000044 f7e1      	BRNE __GLOBAL_INI_LOOP
000045 01fb      	MOVW R30,R22
000046 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000047 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000048 bfed      	OUT  SPL,R30
000049 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00004a bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00004b e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00004c e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00004d c05f      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 
                 	.DSEG
                 ;interrupt [10] void timer0_ovf_isr(void)
                 ; 0000 0023 {
                 
                 	.CSEG
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
00004e 93aa      	ST   -Y,R26
00004f 93ea      	ST   -Y,R30
000050 93fa      	ST   -Y,R31
000051 b7ef      	IN   R30,SREG
000052 93ea      	ST   -Y,R30
                 ; 0000 0024 // Place your code here
                 ; 0000 0025 static unsigned char i=0;
                 ; 0000 0026 PORTC = 0x00;
000053 e0e0      	LDI  R30,LOW(0)
000054 bbe5      	OUT  0x15,R30
                 ; 0000 0027 switch ( i )
000055 91e0 016e 	LDS  R30,_i_S0000000000
000057 e0f0      	LDI  R31,0
                 ; 0000 0028 {
                 ; 0000 0029 case 0:
000058 9730      	SBIW R30,0
000059 f439      	BRNE _0x7
                 ; 0000 002A PORTC = 0x01;
00005a e0e1      	LDI  R30,LOW(1)
00005b bbe5      	OUT  0x15,R30
                 ; 0000 002B PORTD = ~disp[ digit[3] ];
                +
00005c 91e0 016d+LDS R30 , _digit + ( 3 )
                 	__GETB1MN _digit,3
00005e d0ab      	RCALL SUBOPT_0x0
                 ; 0000 002C i = 1;                         //delay_ms(300);
00005f e0e1      	LDI  R30,LOW(1)
000060 c020      	RJMP _0x12
                 ; 0000 002D break;
                 ; 0000 002E case 1:
                 _0x7:
000061 30e1      	CPI  R30,LOW(0x1)
000062 e0a0      	LDI  R26,HIGH(0x1)
000063 07fa      	CPC  R31,R26
000064 f439      	BRNE _0x8
                 ; 0000 002F PORTC = 0x02;
000065 e0e2      	LDI  R30,LOW(2)
000066 bbe5      	OUT  0x15,R30
                 ; 0000 0030 PORTD = ~disp[ digit[2] ];
                +
000067 91e0 016c+LDS R30 , _digit + ( 2 )
                 	__GETB1MN _digit,2
000069 d0a0      	RCALL SUBOPT_0x0
                 ; 0000 0031 i = 2;                         //delay_ms(300);
00006a e0e2      	LDI  R30,LOW(2)
00006b c015      	RJMP _0x12
                 ; 0000 0032 break;
                 ; 0000 0033 case 2:
                 _0x8:
00006c 30e2      	CPI  R30,LOW(0x2)
00006d e0a0      	LDI  R26,HIGH(0x2)
00006e 07fa      	CPC  R31,R26
00006f f439      	BRNE _0x9
                 ; 0000 0034 PORTC = 0x04;
000070 e0e4      	LDI  R30,LOW(4)
000071 bbe5      	OUT  0x15,R30
                 ; 0000 0035 PORTD = ~disp[ digit[1] ];
                +
000072 91e0 016b+LDS R30 , _digit + ( 1 )
                 	__GETB1MN _digit,1
000074 d095      	RCALL SUBOPT_0x0
                 ; 0000 0036 i = 3;                         //delay_ms(300);
000075 e0e3      	LDI  R30,LOW(3)
000076 c00a      	RJMP _0x12
                 ; 0000 0037 break;
                 ; 0000 0038 case 3:
                 _0x9:
000077 30e3      	CPI  R30,LOW(0x3)
000078 e0a0      	LDI  R26,HIGH(0x3)
000079 07fa      	CPC  R31,R26
00007a f441      	BRNE _0x6
                 ; 0000 0039 PORTC = 0x08;
00007b e0e8      	LDI  R30,LOW(8)
00007c bbe5      	OUT  0x15,R30
                 ; 0000 003A PORTD = ~disp[ digit[0] ];
00007d 91e0 016a 	LDS  R30,_digit
00007f d08a      	RCALL SUBOPT_0x0
                 ; 0000 003B i = 0;                         //delay_ms(300);
000080 e0e0      	LDI  R30,LOW(0)
                 _0x12:
000081 93e0 016e 	STS  _i_S0000000000,R30
                 ; 0000 003C break;
                 ; 0000 003D }
                 _0x6:
                 ; 0000 003E }
000083 91e9      	LD   R30,Y+
000084 bfef      	OUT  SREG,R30
000085 91f9      	LD   R31,Y+
000086 91e9      	LD   R30,Y+
000087 91a9      	LD   R26,Y+
000088 9518      	RETI
                 ; .FEND
                 ;void disp_7seg(unsigned int _dat)
                 ; 0000 0041 {
                 _disp_7seg:
                 ; .FSTART _disp_7seg
                 ; 0000 0042 digit[3] = (unsigned char)(_dat/1000);
000089 d087      	RCALL __SAVELOCR2
00008a 018d      	MOVW R16,R26
                 ;	_dat -> R16,R17
00008b eee8      	LDI  R30,LOW(1000)
00008c e0f3      	LDI  R31,HIGH(1000)
00008d d086      	RCALL __DIVW21U
                +
00008e 93e0 016d+STS _digit + ( 3 ) , R30
                 	__PUTB1MN _digit,3
                 ; 0000 0043 digit[2] = (unsigned char)((_dat%1000)/100);
000090 01d8      	MOVW R26,R16
000091 eee8      	LDI  R30,LOW(1000)
000092 e0f3      	LDI  R31,HIGH(1000)
000093 d093      	RCALL __MODW21U
000094 01df      	MOVW R26,R30
000095 e6e4      	LDI  R30,LOW(100)
000096 e0f0      	LDI  R31,HIGH(100)
000097 d07c      	RCALL __DIVW21U
                +
000098 93e0 016c+STS _digit + ( 2 ) , R30
                 	__PUTB1MN _digit,2
                 ; 0000 0044 digit[1] = (unsigned char)((_dat%100)/10);
00009a 01d8      	MOVW R26,R16
00009b e6e4      	LDI  R30,LOW(100)
00009c e0f0      	LDI  R31,HIGH(100)
00009d d089      	RCALL __MODW21U
00009e 01df      	MOVW R26,R30
00009f e0ea      	LDI  R30,LOW(10)
0000a0 e0f0      	LDI  R31,HIGH(10)
0000a1 d072      	RCALL __DIVW21U
                +
0000a2 93e0 016b+STS _digit + ( 1 ) , R30
                 	__PUTB1MN _digit,1
                 ; 0000 0045 digit[0] = (unsigned char)(_dat%10);
0000a4 01d8      	MOVW R26,R16
0000a5 e0ea      	LDI  R30,LOW(10)
0000a6 e0f0      	LDI  R31,HIGH(10)
0000a7 d07f      	RCALL __MODW21U
0000a8 93e0 016a 	STS  _digit,R30
                 ; 0000 0046 
                 ; 0000 0047 }
0000aa 9109      	LD   R16,Y+
0000ab 9119      	LD   R17,Y+
0000ac 9508      	RET
                 ; .FEND
                 ;void main(void)
                 ; 0000 004A {
                 _main:
                 ; .FSTART _main
                 ; 0000 004B // Declare your local variables here
                 ; 0000 004C unsigned int val2=0;
                 ; 0000 004D // Input/Output Ports initialization
                 ; 0000 004E // Port B initialization
                 ; 0000 004F // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=Out
                 ; 0000 0050 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (1<<DDB0);
                 ;	val2 -> R16,R17
                +
0000ad e000     +LDI R16 , LOW ( 0 )
0000ae e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
0000af e0e1      	LDI  R30,LOW(1)
0000b0 bbe7      	OUT  0x17,R30
                 ; 0000 0051 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=0
                 ; 0000 0052 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000b1 e0e0      	LDI  R30,LOW(0)
0000b2 bbe8      	OUT  0x18,R30
                 ; 0000 0053 
                 ; 0000 0054 // Port C initialization
                 ; 0000 0055 // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0056 DDRC=0xff;//(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
0000b3 efef      	LDI  R30,LOW(255)
0000b4 bbe4      	OUT  0x14,R30
                 ; 0000 0057 // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0058 PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0000b5 e0e0      	LDI  R30,LOW(0)
0000b6 bbe5      	OUT  0x15,R30
                 ; 0000 0059 
                 ; 0000 005A // Port D initialization
                 ; 0000 005B // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 005C DDRD=0xff;//(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
0000b7 efef      	LDI  R30,LOW(255)
0000b8 bbe1      	OUT  0x11,R30
                 ; 0000 005D // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 005E PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0000b9 e0e0      	LDI  R30,LOW(0)
0000ba bbe2      	OUT  0x12,R30
                 ; 0000 005F 
                 ; 0000 0060 // Timer/Counter 0 initialization
                 ; 0000 0061 // Clock source: System Clock
                 ; 0000 0062 // Clock value: 8000.000 kHz
                 ; 0000 0063 TCCR0=(0<<CS02) | (0<<CS01) | (1<<CS00);
0000bb e0e1      	LDI  R30,LOW(1)
0000bc bfe3      	OUT  0x33,R30
                 ; 0000 0064 TCNT0=0x00;
0000bd e0e0      	LDI  R30,LOW(0)
0000be bfe2      	OUT  0x32,R30
                 ; 0000 0065 
                 ; 0000 0066 // Timer/Counter 1 initialization
                 ; 0000 0067 // Clock source: System Clock
                 ; 0000 0068 // Clock value: Timer1 Stopped
                 ; 0000 0069 // Mode: Normal top=0xFFFF
                 ; 0000 006A // OC1A output: Disconnected
                 ; 0000 006B // OC1B output: Disconnected
                 ; 0000 006C // Noise Canceler: Off
                 ; 0000 006D // Input Capture on Falling Edge
                 ; 0000 006E // Timer1 Overflow Interrupt: Off
                 ; 0000 006F // Input Capture Interrupt: Off
                 ; 0000 0070 // Compare A Match Interrupt: Off
                 ; 0000 0071 // Compare B Match Interrupt: Off
                 ; 0000 0072 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000bf bdef      	OUT  0x2F,R30
                 ; 0000 0073 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
0000c0 bdee      	OUT  0x2E,R30
                 ; 0000 0074 TCNT1H=0x00;
0000c1 bded      	OUT  0x2D,R30
                 ; 0000 0075 TCNT1L=0x00;
0000c2 bdec      	OUT  0x2C,R30
                 ; 0000 0076 ICR1H=0x00;
0000c3 bde7      	OUT  0x27,R30
                 ; 0000 0077 ICR1L=0x00;
0000c4 bde6      	OUT  0x26,R30
                 ; 0000 0078 OCR1AH=0x00;
0000c5 bdeb      	OUT  0x2B,R30
                 ; 0000 0079 OCR1AL=0x00;
0000c6 bdea      	OUT  0x2A,R30
                 ; 0000 007A OCR1BH=0x00;
0000c7 bde9      	OUT  0x29,R30
                 ; 0000 007B OCR1BL=0x00;
0000c8 bde8      	OUT  0x28,R30
                 ; 0000 007C 
                 ; 0000 007D // Timer/Counter 2 initialization
                 ; 0000 007E // Clock source: System Clock
                 ; 0000 007F // Clock value: Timer2 Stopped
                 ; 0000 0080 // Mode: Normal top=0xFF
                 ; 0000 0081 // OC2 output: Disconnected
                 ; 0000 0082 ASSR=0<<AS2;
0000c9 bde2      	OUT  0x22,R30
                 ; 0000 0083 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0000ca bde5      	OUT  0x25,R30
                 ; 0000 0084 TCNT2=0x00;
0000cb bde4      	OUT  0x24,R30
                 ; 0000 0085 OCR2=0x00;
0000cc bde3      	OUT  0x23,R30
                 ; 0000 0086 
                 ; 0000 0087 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0088 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (1<<TOIE0);
0000cd e0e1      	LDI  R30,LOW(1)
0000ce bfe9      	OUT  0x39,R30
                 ; 0000 0089 
                 ; 0000 008A // External Interrupt(s) initialization
                 ; 0000 008B // INT0: Off
                 ; 0000 008C // INT1: Off
                 ; 0000 008D MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0000cf e0e0      	LDI  R30,LOW(0)
0000d0 bfe5      	OUT  0x35,R30
                 ; 0000 008E 
                 ; 0000 008F // USART initialization
                 ; 0000 0090 // USART disabled
                 ; 0000 0091 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0000d1 b9ea      	OUT  0xA,R30
                 ; 0000 0092 
                 ; 0000 0093 // Analog Comparator initialization
                 ; 0000 0094 // Analog Comparator: Off
                 ; 0000 0095 // The Analog Comparator's positive input is
                 ; 0000 0096 // connected to the AIN0 pin
                 ; 0000 0097 // The Analog Comparator's negative input is
                 ; 0000 0098 // connected to the AIN1 pin
                 ; 0000 0099 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0000d2 e8e0      	LDI  R30,LOW(128)
0000d3 b9e8      	OUT  0x8,R30
                 ; 0000 009A SFIOR=(0<<ACME);
0000d4 e0e0      	LDI  R30,LOW(0)
0000d5 bfe0      	OUT  0x30,R30
                 ; 0000 009B 
                 ; 0000 009C // ADC initialization
                 ; 0000 009D // ADC disabled
                 ; 0000 009E ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
0000d6 b9e6      	OUT  0x6,R30
                 ; 0000 009F 
                 ; 0000 00A0 // SPI initialization
                 ; 0000 00A1 // SPI disabled
                 ; 0000 00A2 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0000d7 b9ed      	OUT  0xD,R30
                 ; 0000 00A3 
                 ; 0000 00A4 // TWI initialization
                 ; 0000 00A5 // TWI disabled
                 ; 0000 00A6 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0000d8 bfe6      	OUT  0x36,R30
                 ; 0000 00A7 
                 ; 0000 00A8 // Bit-Banged I2C Bus initialization
                 ; 0000 00A9 // SDA signal: PORTB bit: 1
                 ; 0000 00AA // SCL signal: PORTB bit: 0
                 ; 0000 00AB // Bit Rate: 100 kHz
                 ; 0000 00AC // Note: I2C settings are specified in the
                 ; 0000 00AD // Project|Configure|C Compiler|Libraries|I2C menu.
                 ; 0000 00AE i2c_init();
0000d9 d050      	RCALL _i2c_init
                 ; 0000 00AF delay_ms(1);
0000da e0a1      	LDI  R26,LOW(1)
0000db e0b0      	LDI  R27,0
0000dc d09d      	RCALL _delay_ms
                 ; 0000 00B0 
                 ; 0000 00B1 // Globally enable interrupts
                 ; 0000 00B2 #asm("sei")
0000dd 9478      	SEI
                 ; 0000 00B3 
                 ; 0000 00B4 while (1)
                 _0xB:
                 ; 0000 00B5 {
                 ; 0000 00B6 // Place your code here
                 ; 0000 00B7 
                 ; 0000 00B8 val++; val1--;
0000de 01f2      	MOVW R30,R4
0000df 9631      	ADIW R30,1
0000e0 012f      	MOVW R4,R30
0000e1 01f3      	MOVW R30,R6
0000e2 9731      	SBIW R30,1
0000e3 013f      	MOVW R6,R30
                 ; 0000 00B9 if(val>65535)  val = 0;
0000e4 efef      	LDI  R30,LOW(65535)
0000e5 efff      	LDI  R31,HIGH(65535)
0000e6 15e4      	CP   R30,R4
0000e7 05f5      	CPC  R31,R5
0000e8 f410      	BRSH _0xE
0000e9 2444      	CLR  R4
0000ea 2455      	CLR  R5
                 ; 0000 00BA if(i2c_start())
                 _0xE:
0000eb d043      	RCALL _i2c_start
0000ec 30e0      	CPI  R30,0
0000ed f041      	BREQ _0xF
                 ; 0000 00BB {
                 ; 0000 00BC i2c_write(0x40);
0000ee e4a0      	LDI  R26,LOW(64)
0000ef d072      	RCALL _i2c_write
                 ; 0000 00BD i2c_write(val&0xff);        //LSB
0000f0 2de4      	MOV  R30,R4
0000f1 2fae      	MOV  R26,R30
0000f2 d06f      	RCALL _i2c_write
                 ; 0000 00BE i2c_write(val>>8);        //MSB
0000f3 2da5      	MOV  R26,R5
0000f4 d06d      	RCALL _i2c_write
                 ; 0000 00BF i2c_stop();
0000f5 d048      	RCALL _i2c_stop
                 ; 0000 00C0 }
                 ; 0000 00C1 if(i2c_start())
                 _0xF:
0000f6 d038      	RCALL _i2c_start
0000f7 30e0      	CPI  R30,0
0000f8 f041      	BREQ _0x10
                 ; 0000 00C2 {
                 ; 0000 00C3 i2c_write(0x42);
0000f9 e4a2      	LDI  R26,LOW(66)
0000fa d067      	RCALL _i2c_write
                 ; 0000 00C4 i2c_write(val1&0xff);        //LSB
0000fb 2de6      	MOV  R30,R6
0000fc 2fae      	MOV  R26,R30
0000fd d064      	RCALL _i2c_write
                 ; 0000 00C5 i2c_write(val1>>8);        //MSB
0000fe 2da7      	MOV  R26,R7
0000ff d062      	RCALL _i2c_write
                 ; 0000 00C6 i2c_stop();
000100 d03d      	RCALL _i2c_stop
                 ; 0000 00C7 }
                 ; 0000 00C8 val2++;
                 _0x10:
                +
000101 5f0f     +SUBI R16 , LOW ( - 1 )
000102 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ; 0000 00C9 disp_7seg(val2);
000103 01d8      	MOVW R26,R16
000104 df84      	RCALL _disp_7seg
                 ; 0000 00CA delay_ms(100);
000105 e6a4      	LDI  R26,LOW(100)
000106 e0b0      	LDI  R27,0
000107 d072      	RCALL _delay_ms
                 ; 0000 00CB 
                 ; 0000 00CC }
000108 cfd5      	RJMP _0xB
                 ; 0000 00CD }
                 _0x11:
000109 cfff      	RJMP _0x11
                 ; .FEND
                 
                 	.DSEG
                 _disp:
000160           	.BYTE 0xA
                 _digit:
00016a           	.BYTE 0x4
                 _i_S0000000000:
00016e           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x0:
00010a e0f0      	LDI  R31,0
00010b 5ae0      	SUBI R30,LOW(-_disp)
00010c 4ffe      	SBCI R31,HIGH(-_disp)
00010d 81e0      	LD   R30,Z
00010e 95e0      	COM  R30
00010f bbe2      	OUT  0x12,R30
000110 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR2:
000111 931a      	ST   -Y,R17
000112 930a      	ST   -Y,R16
000113 9508      	RET
                 
                 __DIVW21U:
000114 2400      	CLR  R0
000115 2411      	CLR  R1
000116 e190      	LDI  R25,16
                 __DIVW21U1:
000117 0faa      	LSL  R26
000118 1fbb      	ROL  R27
000119 1c00      	ROL  R0
00011a 1c11      	ROL  R1
00011b 1a0e      	SUB  R0,R30
00011c 0a1f      	SBC  R1,R31
00011d f418      	BRCC __DIVW21U2
00011e 0e0e      	ADD  R0,R30
00011f 1e1f      	ADC  R1,R31
000120 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000121 60a1      	SBR  R26,1
                 __DIVW21U3:
000122 959a      	DEC  R25
000123 f799      	BRNE __DIVW21U1
000124 01fd      	MOVW R30,R26
000125 01d0      	MOVW R26,R0
000126 9508      	RET
                 
                 __MODW21U:
000127 dfec      	RCALL __DIVW21U
000128 01fd      	MOVW R30,R26
000129 9508      	RET
                 
                 	.equ __scl_bit=0
                 	.equ __sda_bit=1
                 	.equ __i2c_port_scl=0x18
                 	.equ __i2c_dir_scl=__i2c_port_scl-1
                 	.equ __i2c_pin_scl=__i2c_port_scl-2
                 	.equ __i2c_port_sda=0x18
                 	.equ __i2c_dir_sda=__i2c_port_sda-1
                 	.equ __i2c_pin_sda=__i2c_port_sda-2
                 
                 _i2c_init:
00012a 98c0      	cbi  __i2c_port_scl,__scl_bit
00012b 98c1      	cbi  __i2c_port_sda,__sda_bit
00012c 9ab8      	sbi  __i2c_dir_scl,__scl_bit
00012d 98b9      	cbi  __i2c_dir_sda,__sda_bit
00012e c015      	rjmp __i2c_delay2
                 
                 _i2c_start:
00012f 98b9      	cbi  __i2c_dir_sda,__sda_bit
000130 98b8      	cbi  __i2c_dir_scl,__scl_bit
000131 27ee      	clr  r30
000132 0000      	nop
000133 9bb1      	sbis __i2c_pin_sda,__sda_bit
000134 9508      	ret
000135 9bb0      	sbis __i2c_pin_scl,__scl_bit
000136 9508      	ret
000137 d004      	rcall __i2c_delay1
000138 9ab9      	sbi  __i2c_dir_sda,__sda_bit
000139 d002      	rcall __i2c_delay1
00013a 9ab8      	sbi  __i2c_dir_scl,__scl_bit
00013b e0e1      	ldi  r30,1
                 __i2c_delay1:
00013c e065      	ldi  r22,5
00013d c007      	rjmp __i2c_delay2l
                 
                 _i2c_stop:
00013e 9ab9      	sbi  __i2c_dir_sda,__sda_bit
00013f 9ab8      	sbi  __i2c_dir_scl,__scl_bit
000140 d003      	rcall __i2c_delay2
000141 98b8      	cbi  __i2c_dir_scl,__scl_bit
000142 dff9      	rcall __i2c_delay1
000143 98b9      	cbi  __i2c_dir_sda,__sda_bit
                 __i2c_delay2:
000144 e06a      	ldi  r22,10
                 __i2c_delay2l:
000145 956a      	dec  r22
000146 f7f1      	brne __i2c_delay2l
000147 9508      	ret
                 
                 _i2c_read:
000148 e078      	ldi  r23,8
                 __i2c_read0:
000149 98b8      	cbi  __i2c_dir_scl,__scl_bit
00014a dff1      	rcall __i2c_delay1
                 __i2c_read3:
00014b 9bb0      	sbis __i2c_pin_scl,__scl_bit
00014c cffe      	rjmp __i2c_read3
00014d dfee      	rcall __i2c_delay1
00014e 9488      	clc
00014f 99b1      	sbic __i2c_pin_sda,__sda_bit
000150 9408      	sec
000151 9ab8      	sbi  __i2c_dir_scl,__scl_bit
000152 dff1      	rcall __i2c_delay2
000153 1fee      	rol  r30
000154 957a      	dec  r23
000155 f799      	brne __i2c_read0
000156 23aa      	tst  r26
000157 f411      	brne __i2c_read1
000158 98b9      	cbi  __i2c_dir_sda,__sda_bit
000159 c001      	rjmp __i2c_read2
                 __i2c_read1:
00015a 9ab9      	sbi  __i2c_dir_sda,__sda_bit
                 __i2c_read2:
00015b dfe0      	rcall __i2c_delay1
00015c 98b8      	cbi  __i2c_dir_scl,__scl_bit
00015d dfe6      	rcall __i2c_delay2
00015e 9ab8      	sbi  __i2c_dir_scl,__scl_bit
00015f dfdc      	rcall __i2c_delay1
000160 98b9      	cbi  __i2c_dir_sda,__sda_bit
000161 cfda      	rjmp __i2c_delay1
                 
                 _i2c_write:
000162 e078      	ldi  r23,8
                 __i2c_write0:
000163 0faa      	lsl  r26
000164 f410      	brcc __i2c_write1
000165 98b9      	cbi  __i2c_dir_sda,__sda_bit
000166 c001      	rjmp __i2c_write2
                 __i2c_write1:
000167 9ab9      	sbi  __i2c_dir_sda,__sda_bit
                 __i2c_write2:
000168 dfdb      	rcall __i2c_delay2
000169 98b8      	cbi  __i2c_dir_scl,__scl_bit
00016a dfd1      	rcall __i2c_delay1
                 __i2c_write3:
00016b 9bb0      	sbis __i2c_pin_scl,__scl_bit
00016c cffe      	rjmp __i2c_write3
00016d dfce      	rcall __i2c_delay1
00016e 9ab8      	sbi  __i2c_dir_scl,__scl_bit
00016f 957a      	dec  r23
000170 f791      	brne __i2c_write0
000171 98b9      	cbi  __i2c_dir_sda,__sda_bit
000172 dfc9      	rcall __i2c_delay1
000173 98b8      	cbi  __i2c_dir_scl,__scl_bit
000174 dfcf      	rcall __i2c_delay2
000175 e0e1      	ldi  r30,1
000176 99b1      	sbic __i2c_pin_sda,__sda_bit
000177 27ee      	clr  r30
000178 9ab8      	sbi  __i2c_dir_scl,__scl_bit
000179 cfc2      	rjmp __i2c_delay1
                 
                 _delay_ms:
00017a 9610      	adiw r26,0
00017b f039      	breq __delay_ms1
                 __delay_ms0:
00017c 95a8      	wdr
                +
00017d ed80     +LDI R24 , LOW ( 0x7D0 )
00017e e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00017f 9701     +SBIW R24 , 1
000180 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000181 9711      	sbiw r26,1
000182 f7c9      	brne __delay_ms0
                 __delay_ms1:
000183 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8 register use summary:
r0 :   9 r1 :   5 r2 :   0 r3 :   0 r4 :   5 r5 :   3 r6 :   3 r7 :   1 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   9 r17:   4 r18:   0 r19:   0 r20:   0 r21:   0 r22:   5 r23:   4 
r24:   9 r25:   5 r26:  35 r27:   5 r28:   1 r29:   1 r30: 125 r31:  21 
x  :   3 y  :  12 z  :   8 
Registers used: 21 out of 35 (60.0%)

ATmega8 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   1 
adiw  :   2 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :   4 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  14 brpl  :   0 brsh  :   1 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 cbi   :  15 
cbr   :   0 clc   :   1 clh   :   0 cli   :   1 cln   :   0 clr   :   8 
cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   1 cp    :   1 
cpc   :   4 cpi   :   5 cpse  :   0 dec   :   5 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   1 
inc   :   0 ld    :   7 ldd   :   0 ldi   :  69 lds   :   5 lpm   :   7 
lsl   :   2 lsr   :   0 mov   :   6 movw  :  17 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   :   1 or    :   0 ori   :   0 out   :  43 
pop   :   0 push  :   0 rcall :  41 ret   :   9 reti  :   1 rjmp  :  35 
rol   :   4 ror   :   0 sbc   :   1 sbci  :   2 sbi   :  11 sbic  :   2 
sbis  :   4 sbiw  :   7 sbr   :   1 sbrc  :   0 sbrs  :   0 sec   :   1 
seh   :   0 sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :   9 std   :   0 
sts   :   5 sub   :   1 subi  :   2 swap  :   0 tst   :   1 wdr   :   1 

Instructions used: 46 out of 114 (40.4%)

ATmega8 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000308    746     30    776    8192   9.5%
[.dseg] 0x000060 0x00016f      0     15     15    1024   1.5%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 5 warnings
