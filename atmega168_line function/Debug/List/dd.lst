
AVRASM ver. 2.1.30  E:\PCB\Task\Zusger\New folder\Debug\List\dd.asm Tue Nov 01 01:04:39 2022

                 
                 
                 ;CodeVisionAVR C Compiler V3.42 
                 ;(C) Copyright 1998-2020 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega168
                 ;Program type           : Application
                 ;Clock frequency        : 4.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega168
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x04FF
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0044 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
                 
                 _0x14:
000034 0000
000035 0000
000036 0000
000037 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000038 0000
000039 0000
00003a 0000
00003b 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00003c 0000
00003d 0000
00003e 0000
00003f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000040 0000
000041 0000
000042 0000
000043 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 __RESET:
000044 94f8      	CLI
000045 27ee      	CLR  R30
000046 bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000047 e0f1      	LDI  R31,1
000048 bff5      	OUT  MCUCR,R31
000049 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00004a e08d      	LDI  R24,(14-2)+1
00004b e0a2      	LDI  R26,2
00004c 27bb      	CLR  R27
                 __CLEAR_REG:
00004d 93ed      	ST   X+,R30
00004e 958a      	DEC  R24
00004f f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000050 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000051 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000052 e0a0      	LDI  R26,LOW(__SRAM_START)
000053 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000054 93ed      	ST   X+,R30
000055 9701      	SBIW R24,1
000056 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GPIOR0 INITIALIZATION
000057 e0e0      	LDI  R30,__GPIOR0_INIT
000058 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000059 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00005a bfed      	OUT  SPL,R30
00005b e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00005c bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00005d e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00005e e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00005f 940c 00bb 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x200
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;unsigned long read_adc(unsigned char _dat)
                 ; 0000 0025 {
                 
                 	.CSEG
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0026 unsigned long i=0;
                 ; 0000 0027 CS = 0;
000061 9724      	SBIW R28,4
000062 e0e0      	LDI  R30,LOW(0)
000063 83e8      	ST   Y,R30
000064 83e9      	STD  Y+1,R30
000065 83ea      	STD  Y+2,R30
000066 83eb      	STD  Y+3,R30
000067 931a      	ST   -Y,R17
000068 2f1a      	MOV  R17,R26
                 ;	_dat -> R17
                 ;	i -> Y+1
000069 9843      	CBI  0x8,3
                 ; 0000 0028 for(i=0; i<24; i++)
                +
00006a 83e9     +STD Y + 1 , R30
00006b 83ea     +STD Y + 1 + 1 , R30
00006c 83eb     +STD Y + 1 + 2 , R30
00006d 83ec     +STD Y + 1 + 3 , R30
                 	__CLRD1S 1
                 _0x6:
                +
00006e 81a9     +LDD R26 , Y + 1
00006f 81ba     +LDD R27 , Y + 1 + 1
000070 818b     +LDD R24 , Y + 1 + 2
000071 819c     +LDD R25 , Y + 1 + 3
                 	__GETD2S 1
                +
000072 31a8     +CPI R26 , LOW ( 0x18 )
000073 e0e0     +LDI R30 , HIGH ( 0x18 )
000074 07be     +CPC R27 , R30
000075 e0e0     +LDI R30 , BYTE3 ( 0x18 )
000076 078e     +CPC R24 , R30
000077 e0e0     +LDI R30 , BYTE4 ( 0x18 )
000078 079e     +CPC R25 , R30
                 	__CPD2N 0x18
000079 f580      	BRSH _0x7
                 ; 0000 0029 {
                 ; 0000 002A SCK = 0;        delay_us(100);
00007a 982d      	CBI  0x5,5
                +
00007b e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
00007c 958a     +DEC R24
00007d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
                 ; 0000 002B if(MOSI)        val |= (0x01<<i);
00007e 9b1c      	SBIS 0x3,4
00007f c010      	RJMP _0xA
000080 81e9      	LDD  R30,Y+1
000081 e0a1      	LDI  R26,LOW(1)
000082 e0b0      	LDI  R27,HIGH(1)
000083 d0b6      	RCALL __LSLW12
000084 91a0 0200 	LDS  R26,_val
000086 91b0 0201 	LDS  R27,_val+1
000088 9180 0202 	LDS  R24,_val+2
00008a 9190 0203 	LDS  R25,_val+3
00008c 2766      	CLR  R22
00008d 2777      	CLR  R23
00008e d0a6      	RCALL __ORD12
00008f c001      	RJMP _0x1B
                 ; 0000 002C else            val |= (0x00<<i);
                 _0xA:
000090 d08f      	RCALL SUBOPT_0x0
                 _0x1B:
000091 93e0 0200 	STS  _val,R30
000093 93f0 0201 	STS  _val+1,R31
000095 9360 0202 	STS  _val+2,R22
000097 9370 0203 	STS  _val+3,R23
                 ; 0000 002D SCK = 1;        delay_us(100);
000099 9a2d      	SBI  0x5,5
                +
00009a e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
00009b 958a     +DEC R24
00009c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
                 ; 0000 002E }
                +
00009d 81e9     +LDD R30 , Y + 1
00009e 81fa     +LDD R31 , Y + 1 + 1
00009f 816b     +LDD R22 , Y + 1 + 2
0000a0 817c     +LDD R23 , Y + 1 + 3
                 	__GETD1S 1
                +
0000a1 5fef     +SUBI R30 , LOW ( - 1 )
0000a2 4fff     +SBCI R31 , HIGH ( - 1 )
0000a3 4f6f     +SBCI R22 , BYTE3 ( - 1 )
0000a4 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
                +
0000a5 83e9     +STD Y + 1 , R30
0000a6 83fa     +STD Y + 1 + 1 , R31
0000a7 836b     +STD Y + 1 + 2 , R22
0000a8 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
0000a9 cfc4      	RJMP _0x6
                 _0x7:
                 ; 0000 002F CS = 1;
0000aa 9a43      	SBI  0x8,3
                 ; 0000 0030 delay_ms(1);
0000ab e0a1      	LDI  R26,LOW(1)
0000ac e0b0      	LDI  R27,0
0000ad d0a2      	RCALL _delay_ms
                 ; 0000 0031 CS = 0;
0000ae 9843      	CBI  0x8,3
                 ; 0000 0032 delay_ms(1);
0000af e0a1      	LDI  R26,LOW(1)
0000b0 e0b0      	LDI  R27,0
0000b1 d09e      	RCALL _delay_ms
                 ; 0000 0033 CS = 1;
0000b2 9a43      	SBI  0x8,3
                 ; 0000 0034 return (val & 0x1fffff);
0000b3 d06c      	RCALL SUBOPT_0x0
                +
0000b4 7fef     +ANDI R30 , LOW ( 0x1FFFFF )
0000b5 7fff     +ANDI R31 , HIGH ( 0x1FFFFF )
0000b6 716f     +ANDI R22 , BYTE3 ( 0x1FFFFF )
0000b7 7070     +ANDI R23 , BYTE4 ( 0x1FFFFF )
                 	__ANDD1N 0x1FFFFF
0000b8 8118      	LDD  R17,Y+0
0000b9 9625      	ADIW R28,5
0000ba 9508      	RET
                 ; 0000 0035 }
                 ; .FEND
                 ;void main(void)
                 ; 0000 0039 {
                 _main:
                 ; .FSTART _main
                 ; 0000 003A // Declare your local variables here
                 ; 0000 003B float   X1=0.,X2=0.,Y1=0.,Y2=0.,X=0.,Y_P=0.,Y_N=0.;
                 ; 0000 003C unsigned long buff=0;
                 ; 0000 003D 
                 ; 0000 003E // Input/Output Ports initialization
                 ; 0000 003F // Port B initialization
                 ; 0000 0040 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0041 DDRB=0xef;
0000bb 97a0      	SBIW R28,32
0000bc e280      	LDI  R24,32
                +
0000bd e060     +LDI R22 , LOW ( 0 )
0000be e070     +LDI R23 , HIGH ( 0 )
                 	__GETWRN 22,23,0
0000bf e6e8      	LDI  R30,LOW(_0x14*2)
0000c0 e0f0      	LDI  R31,HIGH(_0x14*2)
0000c1 d067      	RCALL __INITLOCB
                 ;	X1 -> Y+28
                 ;	X2 -> Y+24
                 ;	Y1 -> Y+20
                 ;	Y2 -> Y+16
                 ;	X -> Y+12
                 ;	Y_P -> Y+8
                 ;	Y_N -> Y+4
                 ;	buff -> Y+0
0000c2 eeef      	LDI  R30,LOW(239)
0000c3 b9e4      	OUT  0x4,R30
                 ; 0000 0042 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0043 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000c4 e0e0      	LDI  R30,LOW(0)
0000c5 b9e5      	OUT  0x5,R30
                 ; 0000 0044 
                 ; 0000 0045 // Port C initialization
                 ; 0000 0046 // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0047 DDRC=0xff;
0000c6 efef      	LDI  R30,LOW(255)
0000c7 b9e7      	OUT  0x7,R30
                 ; 0000 0048 // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0049 PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0000c8 e0e0      	LDI  R30,LOW(0)
0000c9 b9e8      	OUT  0x8,R30
                 ; 0000 004A 
                 ; 0000 004B // Port D initialization
                 ; 0000 004C // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 004D DDRD=0xff;
0000ca efef      	LDI  R30,LOW(255)
0000cb b9ea      	OUT  0xA,R30
                 ; 0000 004E // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 004F PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0000cc e0e0      	LDI  R30,LOW(0)
0000cd b9eb      	OUT  0xB,R30
                 ; 0000 0050 
                 ; 0000 0051 CS = 1;
0000ce 9a43      	SBI  0x8,3
                 ; 0000 0052 delay_ms(100);
0000cf e6a4      	LDI  R26,LOW(100)
0000d0 e0b0      	LDI  R27,0
0000d1 d07e      	RCALL _delay_ms
                 ; 0000 0053 // Timer/Counter 0 initialization
                 ; 0000 0054 // Clock source: System Clock
                 ; 0000 0055 // Clock value: Timer 0 Stopped
                 ; 0000 0056 // Mode: Normal top=0xFF
                 ; 0000 0057 // OC0A output: Disconnected
                 ; 0000 0058 // OC0B output: Disconnected
                 ; 0000 0059 TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
0000d2 e0e0      	LDI  R30,LOW(0)
0000d3 bde4      	OUT  0x24,R30
                 ; 0000 005A TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
0000d4 bde5      	OUT  0x25,R30
                 ; 0000 005B TCNT0=0x00;
0000d5 bde6      	OUT  0x26,R30
                 ; 0000 005C OCR0A=0x00;
0000d6 bde7      	OUT  0x27,R30
                 ; 0000 005D OCR0B=0x00;
0000d7 bde8      	OUT  0x28,R30
                 ; 0000 005E 
                 ; 0000 005F // Timer/Counter 1 initialization
                 ; 0000 0060 // Clock source: System Clock
                 ; 0000 0061 // Clock value: 3.906 kHz
                 ; 0000 0062 // Mode: Normal top=0xFFFF
                 ; 0000 0063 // OC1A output: Disconnected
                 ; 0000 0064 // OC1B output: Disconnected
                 ; 0000 0065 // Noise Canceler: Off
                 ; 0000 0066 // Input Capture on Falling Edge
                 ; 0000 0067 // Timer Period: 16.777 s
                 ; 0000 0068 // Timer1 Overflow Interrupt: Off
                 ; 0000 0069 // Input Capture Interrupt: Off
                 ; 0000 006A // Compare A Match Interrupt: Off
                 ; 0000 006B // Compare B Match Interrupt: Off
                 ; 0000 006C TCCR1A=0xA3;
0000d8 eae3      	LDI  R30,LOW(163)
0000d9 93e0 0080 	STS  128,R30
                 ; 0000 006D TCCR1B=0x1;
0000db e0e1      	LDI  R30,LOW(1)
0000dc 93e0 0081 	STS  129,R30
                 ; 0000 006E TCNT1H=0x00;
0000de e0e0      	LDI  R30,LOW(0)
0000df 93e0 0085 	STS  133,R30
                 ; 0000 006F TCNT1L=0x00;
0000e1 93e0 0084 	STS  132,R30
                 ; 0000 0070 ICR1H=0;
0000e3 93e0 0087 	STS  135,R30
                 ; 0000 0071 ICR1L=0;
0000e5 93e0 0086 	STS  134,R30
                 ; 0000 0072 
                 ; 0000 0073 OCR1AH = OCR1AL = 0;
0000e7 93e0 0088 	STS  136,R30
0000e9 93e0 0089 	STS  137,R30
                 ; 0000 0074 OCR1BH = OCR1BL = 0;
0000eb 93e0 008a 	STS  138,R30
0000ed 93e0 008b 	STS  139,R30
                 ; 0000 0075 // Timer/Counter 2 initialization
                 ; 0000 0076 // Clock source: System Clock
                 ; 0000 0077 // Clock value: Timer2 Stopped
                 ; 0000 0078 // Mode: Normal top=0xFF
                 ; 0000 0079 // OC2A output: Disconnected
                 ; 0000 007A // OC2B output: Disconnected
                 ; 0000 007B ASSR=(0<<EXCLK) | (0<<AS2);
0000ef 93e0 00b6 	STS  182,R30
                 ; 0000 007C TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<<WGM20);
0000f1 93e0 00b0 	STS  176,R30
                 ; 0000 007D TCCR2B=(0<<WGM22) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0000f3 93e0 00b1 	STS  177,R30
                 ; 0000 007E TCNT2=0x00;
0000f5 93e0 00b2 	STS  178,R30
                 ; 0000 007F OCR2A=0x00;
0000f7 93e0 00b3 	STS  179,R30
                 ; 0000 0080 OCR2B=0x00;
0000f9 93e0 00b4 	STS  180,R30
                 ; 0000 0081 
                 ; 0000 0082 // Timer/Counter 0 Interrupt(s) initialization
                 ; 0000 0083 TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (0<<TOIE0);
0000fb 93e0 006e 	STS  110,R30
                 ; 0000 0084 
                 ; 0000 0085 // Timer/Counter 1 Interrupt(s) initialization
                 ; 0000 0086 TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
0000fd 93e0 006f 	STS  111,R30
                 ; 0000 0087 
                 ; 0000 0088 // Timer/Counter 2 Interrupt(s) initialization
                 ; 0000 0089 TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2);
0000ff 93e0 0070 	STS  112,R30
                 ; 0000 008A MCUCR=(0<<ISC01) | (0<<ISC00);
000101 bfe5      	OUT  0x35,R30
                 ; 0000 008B // External Interrupt(s) initialization
                 ; 0000 008C // INT0: Off
                 ; 0000 008D // INT1: Off
                 ; 0000 008E // Interrupt on any change on pins PCINT0-7: Off
                 ; 0000 008F // Interrupt on any change on pins PCINT8-14: Off
                 ; 0000 0090 // Interrupt on any change on pins PCINT16-23: Off
                 ; 0000 0091 EICRA=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
000102 93e0 0069 	STS  105,R30
                 ; 0000 0092 EIMSK=(0<<INT1) | (0<<INT0);
000104 bbed      	OUT  0x1D,R30
                 ; 0000 0093 PCICR=(0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
000105 93e0 0068 	STS  104,R30
                 ; 0000 0094 
                 ; 0000 0095 // USART initialization
                 ; 0000 0096 // USART disabled
                 ; 0000 0097 UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (0<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
000107 93e0 00c1 	STS  193,R30
                 ; 0000 0098 
                 ; 0000 0099 // Analog Comparator initialization
                 ; 0000 009A // Analog Comparator: Off
                 ; 0000 009B // The Analog Comparator's positive input is
                 ; 0000 009C // connected to the AIN0 pin
                 ; 0000 009D // The Analog Comparator's negative input is
                 ; 0000 009E // connected to the AIN1 pin
                 ; 0000 009F ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
000109 e8e0      	LDI  R30,LOW(128)
00010a bfe0      	OUT  0x30,R30
                 ; 0000 00A0 ADCSRB=(0<<ACME);
00010b e0e0      	LDI  R30,LOW(0)
00010c 93e0 007b 	STS  123,R30
                 ; 0000 00A1 // Digital input buffer on AIN0: On
                 ; 0000 00A2 // Digital input buffer on AIN1: On
                 ; 0000 00A3 DIDR1=(0<<AIN0D) | (0<<AIN1D);
00010e 93e0 007f 	STS  127,R30
                 ; 0000 00A4 
                 ; 0000 00A5 
                 ; 0000 00A6 // ADC initialization
                 ; 0000 00A7 // ADC Clock frequency: 1000.000 kHz
                 ; 0000 00A8 // ADC Voltage Reference: AVCC pin
                 ; 0000 00A9 // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 00AA // Digital input buffers on ADC0: Off, ADC1: On, ADC2: On, ADC3: On
                 ; 0000 00AB // ADC4: On, ADC5: On
                 ; 0000 00AC DIDR0=(0<<ADC5D) | (0<<ADC4D) | (0<<ADC3D) | (0<<ADC2D) | (0<<ADC1D) | (1<<ADC0D);
000110 e0e1      	LDI  R30,LOW(1)
000111 93e0 007e 	STS  126,R30
                 ; 0000 00AD 
                 ; 0000 00AE // SPI initialization
                 ; 0000 00AF // SPI disabled
                 ; 0000 00B0 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
000113 e0e0      	LDI  R30,LOW(0)
000114 bdec      	OUT  0x2C,R30
                 ; 0000 00B1 
                 ; 0000 00B2 // TWI initialization
                 ; 0000 00B3 // TWI disabled
                 ; 0000 00B4 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
000115 93e0 00bc 	STS  188,R30
                 ; 0000 00B5 #asm ("sei");
000117 9478      	SEI
                 ; 0000 00B6 
                 ; 0000 00B7 
                 ; 0000 00B8 while (1)
                 _0x17:
                 ; 0000 00B9 {
                 ; 0000 00BA // Place your code here
                 ; 0000 00BB 
                 ; 0000 00BC buff = read_adc(1);
000118 e0a1      	LDI  R26,LOW(1)
000119 df47      	RCALL _read_adc
00011a d030      	RCALL __PUTD1S0
                 ; 0000 00BD delay_ms(100);
00011b e6a4      	LDI  R26,LOW(100)
00011c e0b0      	LDI  R27,0
00011d d032      	RCALL _delay_ms
                 ; 0000 00BE }
00011e cff9      	RJMP _0x17
                 ; 0000 00BF }
                 _0x1A:
00011f cfff      	RJMP _0x1A
                 ; .FEND
                 
                 	.DSEG
                 _val:
000200           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x0:
000120 91e0 0200 	LDS  R30,_val
000122 91f0 0201 	LDS  R31,_val+1
000124 9160 0202 	LDS  R22,_val+2
000126 9170 0203 	LDS  R23,_val+3
000128 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __INITLOCB:
                 __INITLOCW:
000129 93af      	PUSH R26
00012a 93bf      	PUSH R27
00012b 01db      	MOVW R26,R22
00012c 0fac      	ADD  R26,R28
00012d 1fbd      	ADC  R27,R29
                 __INITLOC0:
00012e 9005      	LPM  R0,Z+
00012f 920d      	ST   X+,R0
000130 958a      	DEC  R24
000131 f7e1      	BRNE __INITLOC0
000132 91bf      	POP  R27
000133 91af      	POP  R26
000134 9508      	RET
                 
                 __ORD12:
000135 2bea      	OR   R30,R26
000136 2bfb      	OR   R31,R27
000137 2b68      	OR   R22,R24
000138 2b79      	OR   R23,R25
000139 9508      	RET
                 
                 __LSLW12:
00013a 23ee      	TST  R30
00013b 2e0e      	MOV  R0,R30
00013c e0e8      	LDI  R30,8
00013d 2e1e      	MOV  R1,R30
00013e 01fd      	MOVW R30,R26
00013f f051      	BREQ __LSLW12R
                 __LSLW12S8:
000140 1401      	CP   R0,R1
000141 f020      	BRLO __LSLW12L
000142 2ffe      	MOV  R31,R30
000143 e0e0      	LDI  R30,0
000144 1801      	SUB  R0,R1
000145 f021      	BREQ __LSLW12R
                 __LSLW12L:
000146 0fee      	LSL  R30
000147 1fff      	ROL  R31
000148 940a      	DEC  R0
000149 f7e1      	BRNE __LSLW12L
                 __LSLW12R:
00014a 9508      	RET
                 
                 __PUTD1S0:
00014b 83e8      	ST   Y,R30
00014c 83f9      	STD  Y+1,R31
00014d 836a      	STD  Y+2,R22
00014e 837b      	STD  Y+3,R23
00014f 9508      	RET
                 
                 _delay_ms:
000150 9610      	adiw r26,0
000151 f039      	breq __delay_ms1
                 __delay_ms0:
000152 95a8      	wdr
                +
000153 ee88     +LDI R24 , LOW ( 0x3E8 )
000154 e093     +LDI R25 , HIGH ( 0x3E8 )
                +__DELAY_USW_LOOP :
000155 9701     +SBIW R24 , 1
000156 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x3E8
000157 9711      	sbiw r26,1
000158 f7c9      	brne __delay_ms0
                 __delay_ms1:
000159 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega168 register use summary:
r0 :   6 r1 :   3 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   3 r18:   0 r19:   0 r20:   0 r21:   0 r22:  11 r23:  10 
r24:  16 r25:   6 r26:  20 r27:  14 r28:   5 r29:   2 r30:  99 r31:  13 
x  :   3 y  :  27 z  :   1 
Registers used: 16 out of 35 (45.7%)

ATmega168 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   1 
adiw  :   2 and   :   0 andi  :   4 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   3 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :   8 brpl  :   0 brsh  :   1 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   0 
cbi   :   3 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   4 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   1 cpc   :   3 cpi   :   1 cpse  :   0 dec   :   5 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   0 inc   :   0 jmp   :  27 ld    :   0 ldd   :  10 ldi   :  52 
lds   :   8 lpm   :   1 lsl   :   1 lsr   :   0 mov   :   4 movw  :   2 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   4 
ori   :   0 out   :  21 pop   :   2 push  :   2 rcall :  11 ret   :   7 
reti  :   0 rjmp  :   5 rol   :   1 ror   :   0 sbc   :   0 sbci  :   3 
sbi   :   4 sbic  :   0 sbis  :   1 sbiw  :   5 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :   6 std   :  14 sts   :  30 sub   :   1 subi  :   1 swap  :   0 
tst   :   1 wdr   :   1 
Instructions used: 43 out of 116 (37.1%)

ATmega168 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0002b4    660     32    692   16384   4.2%
[.dseg] 0x000100 0x000204      0      4      4    1024   0.4%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 0 warnings
